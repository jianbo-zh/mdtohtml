package main

import (
	"bytes"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/jianbo-zh/mdtohtml/package/btintpl"

	"github.com/russross/blackfriday/v2"
)

const logoStr = "My Notebook"
const footerStr = "Generated by github.com/jianbo-zh/mdtohtml"

func main() {
	// 解析命令行参数
	srcDir, dstDir, isLocal, err := getCliOpts()
	checkError(err)

	fis, err := ioutil.ReadDir(srcDir)
	checkError(err)

	// 首先循环遍历一遍，获取所有分类、最新分类等，方便后面使用
	var allCates []string
	var latestCates []map[string]interface{}

	cateMaps := make(map[string][]string)
	tagMaps := make(map[string]map[string][]string)

	for _, fi := range fis {
		if fi.IsDir() {
			allCates = append(allCates, fi.Name())
			fis2, err := ioutil.ReadDir(filepath.Join(srcDir, fi.Name()))
			checkError(err)

			latestCates = append(latestCates, map[string]interface{}{
				"name": fi.Name(),
				"time": fi.ModTime().Unix(),
			})

			for _, fi2 := range fis2 {
				if filepath.Ext(fi2.Name()) == ".md" {
					if _, isExist := cateMaps[fi.Name()]; isExist {
						cateMaps[fi.Name()] = append(cateMaps[fi.Name()], fi2.Name())
					} else {
						cateMaps[fi.Name()] = []string{fi2.Name()}
					}

					metaData, err := getMdMd(filepath.Join(srcDir, fi.Name(), fi2.Name()))
					checkError(err)

					if tags, isExist := metaData["tags"]; isExist {
						for _, tag := range tags {
							if _, isExist := tagMaps[fi.Name()]; !isExist {
								tagMaps[fi.Name()] = make(map[string][]string)
							}

							aName := strings.TrimSuffix(fi2.Name(), ".md")

							if _, isExist := tagMaps[fi.Name()][tag]; !isExist {
								tagMaps[fi.Name()][tag] = []string{aName}

							} else {
								tagMaps[fi.Name()][tag] = append(tagMaps[fi.Name()][tag], aName)
							}
						}
					}
				}
			}
		}
	}

	// 找出最新分类：Top5
	var topCates []string

	sort.SliceStable(latestCates, func(i, j int) bool {
		return latestCates[i]["time"].(int64) > latestCates[j]["time"].(int64)
	})

	topNum := 5
	if len(latestCates) < 5 {
		topNum = len(latestCates)
	}
	for _, cate := range latestCates[:topNum] {
		topCates = append(topCates, cate["name"].(string))
	}

	// 创建临时目录，以生成模板
	tmpDir, err := ioutil.TempDir("./", "html")
	checkError(err)
	defer func() {
		if _, err := os.Stat(tmpDir); err == nil {
			os.RemoveAll(tmpDir)
		}
	}()

	// 创建模板函数 rooturl，以根据 isLocal 参数，来生成对应的 a 链接的根路径
	absDstDir, err := filepath.Abs(filepath.Clean(dstDir))
	checkError(err)

	tplFuncMap := template.FuncMap{
		"rooturl": func() string {
			if isLocal {
				return filepath.ToSlash(absDstDir)
			}
			return ""
		},
	}

	// 开始生成 HTML 页面
	for key, val := range cateMaps { // 目录列表
		cateDir := filepath.Join(tmpDir, key)
		err := os.Mkdir(cateDir, 0777)
		checkError(err)

		articles := make([]string, len(val))
		for _, article := range val {
			articles = append(articles, strings.TrimSuffix(article, ".md"))
		}

		var tags []string
		if cateTags, isExist := tagMaps[key]; isExist {
			for ct := range cateTags {
				tags = append(tags, ct)
			}
		}

		var latestTime time.Time
		var latestCnt []byte

		for _, li := range val { // 文件列表

			fPath := filepath.Join(srcDir, key, li)

			// 读取原文章内容
			mdCnt, err := getMdCnt(fPath)
			checkError(err)

			// 记录当前分类最新文章
			ftime, err := getFileTime(fPath)
			if ftime.After(latestTime) {
				latestTime = ftime
				latestCnt = mdCnt
			}

			// 解析: md -> html
			htmlCnt := string(blackfriday.Run(
				bytes.ReplaceAll(mdCnt, []byte("\r"), nil),
				blackfriday.WithExtensions(blackfriday.CommonExtensions|blackfriday.HardLineBreak),
			))

			// 文件路径
			articlePath := filepath.Join(cateDir, strings.Replace(li, ".md", ".html", 1))

			// 生成文件
			err = btintpl.GenArticlePage(articlePath, tplFuncMap, "Article:"+li, logoStr, topCates, key, articles, tags, htmlCnt, footerStr)
			checkError(err)
		}

		// 生成分类主页
		cateIndexPath := filepath.Join(cateDir, "index.html")
		lastestHTMLCnt := string(blackfriday.Run(
			bytes.ReplaceAll(latestCnt, []byte("\r"), nil),
			blackfriday.WithExtensions(blackfriday.CommonExtensions|blackfriday.HardLineBreak),
		))
		err = btintpl.GenArticlePage(cateIndexPath, tplFuncMap, "Index:"+key, logoStr, topCates, key, articles, tags, lastestHTMLCnt, footerStr)
		checkError(err)

		// 生成Articles Tag标签页
		err = os.Mkdir(filepath.Join(cateDir, "tag"), 0777)
		checkError(err)
		if cateTags, isExist := tagMaps[key]; isExist {
			for tagName, tArticles := range cateTags {
				tFilePath := filepath.Join(cateDir, "tag", tagName+".html")

				err = btintpl.GenTagPage(tFilePath, tplFuncMap, "Tag:"+key+"-"+tagName, logoStr, topCates, key, articles, tags, tagName, tArticles, footerStr)
				checkError(err)
			}
		}
	}

	// 生成首页
	indexPath := filepath.Join(tmpDir, "index.html")
	err = btintpl.GenIndexPage(indexPath, tplFuncMap, "Index", logoStr, topCates, allCates, footerStr)
	checkError(err)

	// 临时目录移动到目标目录
	if _, err := os.Stat(dstDir); err == nil {
		err = os.RemoveAll(dstDir)
		checkError(err)
	}
	err = os.Rename(tmpDir, dstDir)
	checkError(err)
}
